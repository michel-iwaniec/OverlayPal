#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

%data secondpass_input.cdat : CELL_COLOR_LIMIT, MAX_SPR_PALETTES, SPR_PALETTES set, OVERLAY_ROW_SIZE_LIMIT, XRANGE set, YRANGE set, COLORS set, layerColors[XRANGE, YRANGE, COLORS], layerColorColumnCount[XRANGE, YRANGE, COLORS]

parameters:
    MAX_COLORS_OVERLAY  := MAX_SPR_PALETTES * CELL_COLOR_LIMIT;

variables:
    # Decision variables represent for each possible color
    # - 0 if this grid cell does not have the color in the layer
    # - 1 if this grid cell has the color in the layer
    colorsOverlay[XRANGE, YRANGE, COLORS] : binary;
    colorsOverlayGrid[XRANGE, YRANGE, COLORS] : binary;
    colorsOverlayFree[XRANGE, YRANGE, COLORS] : binary;
    # Overlay occupancy is 1 if any color in this cell is inside overlay
    occupancy[XRANGE, YRANGE] : binary;
    # overlay total is 1 whenever a particular color is anywhere in the overlay
    colorsOverlayTotal[COLORS] : binary;
    # Represents colors present in each palette
    palettesOverlay[SPR_PALETTES, COLORS] : binary;
    # Represents whether colors in a cell are a subset of each palette
    usesPaletteOverlay[XRANGE, YRANGE, SPR_PALETTES] : binary;

objectives:
    # Goal: Minimise free sprites
    sum{ x in XRANGE, y in YRANGE, c in COLORS: layerColorColumnCount[x, y, c] * colorsOverlayFree[x, y, c] } -> min;

constraints:
    # Constraints ensuring that a BG cell can have no more colors than the cell color limit	 
    `cellColorLimit_ { x in XRANGE, y in YRANGE:
        sum{ c in COLORS: colorsOverlayGrid[x, y, c] } <= CELL_COLOR_LIMIT;
    }

    # Constraints ensuring that a color must be in one-and-only-one of grid-overlay or free-overlay
    `color_ { x in XRANGE, y in YRANGE, c in COLORS:
        `InEitherGridOrFreeOverlay_ colorsOverlayGrid[x, y, c] + colorsOverlayFree[x, y, c] = colorsOverlay[x, y, c];
        `OverlayEqualToLayerColors_ colorsOverlay[x, y, c] = layerColors[x, y, c];
    }

    # Constraints for occupancy (logical OR between all colors in colorsOverlayGrid, reformulated in LP)
    `occupancy_lt { x in XRANGE, y in YRANGE:
        `_lt1 occupancy[x, y] <= 1;
        `_ltSUM occupancy[x, y] <= sum{ c in COLORS: colorsOverlayGrid[x, y, c] };
    }
    `occupancy_gt { x in XRANGE, y in YRANGE, c in COLORS:
        `_gtColorsOverlayGrid occupancy[x, y] >= colorsOverlayGrid[x, y, c];
    }

    # Constraints row size limit (approximates sprites / scanline limit)
    `rowLimit_ { y in YRANGE:
        sum{ x in XRANGE: occupancy[x, y] } + sum{ x in XRANGE, c in COLORS: colorsOverlayFree[x, y, c] }  <= OVERLAY_ROW_SIZE_LIMIT;
    }

    # Boolean constraint to get all free colors into a global
    `colorsOverlay_ { c in COLORS:
        { x in XRANGE, y in YRANGE:
            `Total colorsOverlayTotal[c] >= colorsOverlayFree[x, y, c];
        }
        `TotalClampToFree colorsOverlayTotal[c] <= sum{ x in XRANGE, y in YRANGE: colorsOverlayFree[x, y, c] };
        `TotalClampToOne colorsOverlayTotal[c] <= 1;
    }

    # Ensure each individual free overlay color is present in at least one optimised overlay palette
    `freeColorInAnyPalette_ { c in COLORS:
        sum{ p in SPR_PALETTES: palettesOverlay[p, c] } >= colorsOverlayTotal[c];
    }

    # Constraint for palette color limit
    `paletteColorLimit_ { p in SPR_PALETTES:
        sum{ c in COLORS: palettesOverlay[p, c] } <= CELL_COLOR_LIMIT;
    }

    # Constraint to ensure total overlay colors don't exceed overlay palette
    overlayColorLimit:
        sum{ c in COLORS: colorsOverlayTotal[c] } <= MAX_COLORS_OVERLAY;

    # Constraint for colors-subset-of-palette
    `colorsOverlaymustBeSubsetOfPalette_ { x in XRANGE, y in YRANGE, p in SPR_PALETTES, c in COLORS:
        usesPaletteOverlay[x, y, p] * colorsOverlayGrid[x, y, c] <= palettesOverlay[p, c];
    }

    # Constraint to ensure that every BG cell's set of colors are a subset of some palette's colors
    `cellColorsInPalette_ { x in XRANGE, y in YRANGE:
        sum{ p in SPR_PALETTES: usesPaletteOverlay[x, y, p] } = 1;
    }

