#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

%data firstpass_input.cdat : CELL_COLOR_LIMIT, MAX_BG_PALETTES, BG_PALETTES set, MAX_SPR_PALETTES, SPR_PALETTES set, OVERLAY_ROW_SIZE_LIMIT, XRANGE set, YRANGE set, COLORS set, layerColors[XRANGE, YRANGE, COLORS], layerColorColumnCount[XRANGE, YRANGE, COLORS]

parameters:
    MAX_COLORS_OVERLAY  := MAX_SPR_PALETTES * CELL_COLOR_LIMIT;

variables:
    # Decision variables represent for each possible color
    # - 0 if this grid cell does not have the color in the layer
    # - 1 if this grid cell has the color in the layer
    colorsBG[XRANGE, YRANGE, COLORS] : binary;
    colorsOverlay[XRANGE, YRANGE, COLORS] : binary;
    # Overlay occupancy is 1 if any color in this cell is inside overlay
    occupancy[XRANGE, YRANGE] : binary;
    # overlay total is 1 whenever a particular color is anywhere in the overlay
    colorsOverlayTotal[COLORS] : binary;
    # Represents colors present in each palette
    palettesBG[BG_PALETTES, COLORS] : binary;
    # Represents whether colors in a cell are a subset of each palette
    usesPaletteBG[XRANGE, YRANGE, BG_PALETTES] : binary;

objectives:
    # Goal: Minimise colors moved to overlay
    sum{ x in XRANGE, y in YRANGE, c in COLORS: layerColorColumnCount[x, y, c] * colorsOverlay[x, y, c] } -> min;

constraints:
    # Constraints ensuring that a BG cell can have no more colors than the cell color limit	 
    `cellColorLimit_ { x in XRANGE, y in YRANGE:
        sum{ c in COLORS: colorsBG[x, y, c] } <= CELL_COLOR_LIMIT;
    }

    # Constraints ensuring that a color must be in one-and-only-one of BG or overlay
    `color_InEitherBGorOverlay_ { x in XRANGE, y in YRANGE:
        colorsBG[x, y, COLORS] + colorsOverlay[x, y, COLORS] = layerColors[x, y, COLORS];
    }

    # Constraints for occupancy (logical OR between all colors in colorsOverlay, reformulated in LP)
    `occupancy_ { x in XRANGE, y in YRANGE:
        `_gtColorsOverlay occupancy[x, y] >= colorsOverlay[x, y, COLORS];
        `_lt1 occupancy[x, y] <= 1;
        `_ltSUM occupancy[x, y] <= sum{ c in COLORS: colorsOverlay[x, y, c] };
    }

    # Constraints to prevent each row to have more active overlay cells above limit (approximates sprites / scanline limit)
    `rowLimit_ { y in YRANGE:
        sum{ x in XRANGE: occupancy[x, y] } <= OVERLAY_ROW_SIZE_LIMIT;
    }

    # Boolean constraint to get all free colors into a global
    `colorsOverlayTotal_ { c in COLORS:
        { x in XRANGE, y in YRANGE:
            colorsOverlayTotal[c] >= colorsOverlay[x, y, c];
        }
            `_clamp colorsOverlayTotal[c] <= 1;
    }

    # Constraint for BG palette color limit
    `paletteColorLimit_ { p in BG_PALETTES:
        sum{ @c in COLORS: palettesBG[p,c] } <= CELL_COLOR_LIMIT;
    }

    # Constraint to ensure total overlay colors don't exceed overlay palette
    overlayColorLimit:
        sum{ c in COLORS: colorsOverlayTotal[c] } <= MAX_COLORS_OVERLAY;

    # Constraint for colors-subset-of-palette
    `colorsBGmustBeSubsetOfPalette_ { x in XRANGE, y in YRANGE, p in BG_PALETTES:
        usesPaletteBG[x, y, p] * colorsBG[x, y, COLORS] <= palettesBG[p, COLORS];
    }

    # Constraint to ensure that every BG cell's set of colors are a subset of some palette's colors
    `cellColorsInPalette_ { x in XRANGE, y in YRANGE:
        sum{ p in BG_PALETTES: usesPaletteBG[x, y, p] } = 1;
    }

